// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBallots(t *testing.T) {
	t.Parallel()

	query := Ballots()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBallotsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBallotsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Ballots().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBallotsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BallotSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBallotsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BallotExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Ballot exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BallotExists to return true, but got false.")
	}
}

func testBallotsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ballotFound, err := FindBallot(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ballotFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBallotsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Ballots().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBallotsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Ballots().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBallotsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ballotOne := &Ballot{}
	ballotTwo := &Ballot{}
	if err = randomize.Struct(seed, ballotOne, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}
	if err = randomize.Struct(seed, ballotTwo, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ballotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ballotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ballots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBallotsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ballotOne := &Ballot{}
	ballotTwo := &Ballot{}
	if err = randomize.Struct(seed, ballotOne, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}
	if err = randomize.Struct(seed, ballotTwo, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ballotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ballotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ballotBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ballot) error {
	*o = Ballot{}
	return nil
}

func ballotAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ballot) error {
	*o = Ballot{}
	return nil
}

func ballotAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Ballot) error {
	*o = Ballot{}
	return nil
}

func ballotBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ballot) error {
	*o = Ballot{}
	return nil
}

func ballotAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ballot) error {
	*o = Ballot{}
	return nil
}

func ballotBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ballot) error {
	*o = Ballot{}
	return nil
}

func ballotAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ballot) error {
	*o = Ballot{}
	return nil
}

func ballotBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ballot) error {
	*o = Ballot{}
	return nil
}

func ballotAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ballot) error {
	*o = Ballot{}
	return nil
}

func testBallotsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Ballot{}
	o := &Ballot{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ballotDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ballot object: %s", err)
	}

	AddBallotHook(boil.BeforeInsertHook, ballotBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ballotBeforeInsertHooks = []BallotHook{}

	AddBallotHook(boil.AfterInsertHook, ballotAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ballotAfterInsertHooks = []BallotHook{}

	AddBallotHook(boil.AfterSelectHook, ballotAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ballotAfterSelectHooks = []BallotHook{}

	AddBallotHook(boil.BeforeUpdateHook, ballotBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ballotBeforeUpdateHooks = []BallotHook{}

	AddBallotHook(boil.AfterUpdateHook, ballotAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ballotAfterUpdateHooks = []BallotHook{}

	AddBallotHook(boil.BeforeDeleteHook, ballotBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ballotBeforeDeleteHooks = []BallotHook{}

	AddBallotHook(boil.AfterDeleteHook, ballotAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ballotAfterDeleteHooks = []BallotHook{}

	AddBallotHook(boil.BeforeUpsertHook, ballotBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ballotBeforeUpsertHooks = []BallotHook{}

	AddBallotHook(boil.AfterUpsertHook, ballotAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ballotAfterUpsertHooks = []BallotHook{}
}

func testBallotsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBallotsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ballotColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBallotToOneElectionUsingElection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Ballot
	var foreign Election

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, electionDBTypes, false, electionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Election struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ElectionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Election().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BallotSlice{&local}
	if err = local.L.LoadElection(ctx, tx, false, (*[]*Ballot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Election == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Election = nil
	if err = local.L.LoadElection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Election == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBallotToOneSetOpElectionUsingElection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ballot
	var b, c Election

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ballotDBTypes, false, strmangle.SetComplement(ballotPrimaryKeyColumns, ballotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, electionDBTypes, false, strmangle.SetComplement(electionPrimaryKeyColumns, electionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, electionDBTypes, false, strmangle.SetComplement(electionPrimaryKeyColumns, electionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Election{&b, &c} {
		err = a.SetElection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Election != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Ballots[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ElectionID != x.ID {
			t.Error("foreign key was wrong value", a.ElectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ElectionID))
		reflect.Indirect(reflect.ValueOf(&a.ElectionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ElectionID != x.ID {
			t.Error("foreign key was wrong value", a.ElectionID, x.ID)
		}
	}
}

func testBallotsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBallotsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BallotSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBallotsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ballots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ballotDBTypes = map[string]string{`ID`: `bigint`, `ElectionID`: `bigint`, `Key`: `text`, `Name`: `text`, `Choices`: `ARRAYtext`, `CreatedAt`: `timestamp with time zone`}
	_             = bytes.MinRead
)

func testBallotsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ballotPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ballotAllColumns) == len(ballotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBallotsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ballotAllColumns) == len(ballotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ballotAllColumns, ballotPrimaryKeyColumns) {
		fields = ballotAllColumns
	} else {
		fields = strmangle.SetComplement(
			ballotAllColumns,
			ballotPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BallotSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBallotsUpsert(t *testing.T) {
	t.Parallel()

	if len(ballotAllColumns) == len(ballotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ballot{}
	if err = randomize.Struct(seed, &o, ballotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ballot: %s", err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ballotDBTypes, false, ballotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ballot: %s", err)
	}

	count, err = Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
